import os
import time
import datetime
import logging
import requests

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
from dotenv import load_dotenv

# Load config from .env
load_dotenv()
TE_API_TOKEN = os.getenv("TE_API_TOKEN")
if not TE_API_TOKEN:
    raise RuntimeError("Missing ThousandEyes API token in TE_API_TOKEN")
TE_API_BASE_URL = os.getenv("TE_API_BASE_URL", "https://api.thousandeyes.com/v7")
RATE_LIMIT_BUFFER = int(os.getenv("RATE_LIMIT_BUFFER", "5"))

# Proxy configuration (if any)
proxies = {}
http_proxy = os.getenv("HTTP_PROXY") or os.getenv("http_proxy")
https_proxy = os.getenv("HTTPS_PROXY") or os.getenv("https_proxy")
if http_proxy:
    proxies["http"] = http_proxy
if https_proxy:
    proxies["https"] = https_proxy

# Structured logging setup
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger(__name__)

def call_api(method: str, url: str, headers: Dict[str, str], payload: Optional[Any]=None, allow_retry: bool=True) -> Optional[requests.Response]:
    """
    Send HTTP request with retry/backoff for 429 and 5xx status codes.
    Uses rate-limit headers (X-Organization-Rate-Limit-*) to pause if needed.
    """
    max_retries = 3
    backoff = 1
    for attempt in range(1, max_retries + 1):
        try:
            if payload is not None:
                resp = requests.request(method, url, headers=headers, json=payload, proxies=proxies)
            else:
                resp = requests.request(method, url, headers=headers, proxies=proxies)
        except requests.RequestException as e:
            logger.error(f"Request exception on attempt {attempt}: {e}")
            if attempt < max_retries and allow_retry:
                time.sleep(backoff)
                backoff *= 2
                continue
            else:
                raise

        # Rate-limit headers handling
        limit = resp.headers.get("x-organization-rate-limit-limit")
        remaining = resp.headers.get("x-organization-rate-limit-remaining")
        reset = resp.headers.get("x-organization-rate-limit-reset")
        if limit and remaining and reset:
            try:
                remaining = int(remaining)
                reset_ts = int(reset)
                now_ts = int(datetime.datetime.now(datetime.timezone.utc).timestamp())
                if remaining <= RATE_LIMIT_BUFFER and reset_ts > now_ts:
                    wait = reset_ts - now_ts
                    logger.warning(f"Rate limit low ({remaining}/{limit}); sleeping {wait}s")
                    time.sleep(wait)
            except ValueError:
                pass

        status = resp.status_code
        if status == 200:
            return resp
        if status == 429:
            retry_after = int(resp.headers.get("Retry-After", "1"))
            logger.warning(f"429 Too Many Requests (attempt {attempt}), retrying after {retry_after}s")
            if attempt < max_retries and allow_retry:
                time.sleep(retry_after or backoff)
                backoff *= 2
                continue
            else:
                resp.raise_for_status()
        if 500 <= status < 600:
            logger.error(f"Server error {status} on attempt {attempt}")
            if attempt < max_retries and allow_retry:
                time.sleep(backoff)
                backoff *= 2
                continue
            else:
                resp.raise_for_status()
        if status in (301, 400, 401, 403, 404, 405, 406, 415):
            logger.error(f"HTTP {status} for URL {url}")
            return None
        else:
            resp.raise_for_status()
    return None

app = FastAPI(title="ThousandEyes Test Results Service")

class TestResult(BaseModel):
    testId: int
    testName: str
    testType: str
    latestResult: Optional[Dict[str, Any]]

@app.get("/test-results/{app_id}", response_model=List[TestResult])
async def get_test_results(app_id: int):
    """
    Return recent results for tests in account groups labeled with distributed_app_ids:<app_id>.
    """
    headers = {
        "Authorization": f"Bearer {TE_API_TOKEN}",
        "Content-Type": "application/json"
    }

    # 1) List all account groups
    groups_url = f"{TE_API_BASE_URL}/account-groups"
    resp_groups = call_api("GET", groups_url, headers)
    if not resp_groups:
        raise HTTPException(status_code=502, detail="Failed to retrieve account groups")
    groups_json = resp_groups.json().get("accountGroups", [])
    tag = f"distributed_app_ids:{app_id}"
    matching_aids = []
    for grp in groups_json:
        name = grp.get("accountGroupName", "")
        aid = grp.get("aid")
        if name and aid and (tag in name):
            matching_aids.append(aid)
    if not matching_aids:
        raise HTTPException(status_code=404, detail=f"No account group found for app_id {app_id}")

    # Allowed test types and their API paths
    allowed_tests = {
        "agentToServerTests": ("agent-to-server", "/tests/agent-to-server"),
        "httpServerTests":     ("http-server",     "/tests/http-server"),
        "pageLoadTests":       ("page-load",       "/tests/page-load"),
        "webTransactionTests": ("web-transactions", "/tests/web-transactions"),
    }

    results: List[TestResult] = []
    # 2) For each matching group, retrieve tests and filter by allowed type
    for aid in matching_aids:
        tests_url = f"{TE_API_BASE_URL}/tests?aid={aid}"
        resp_tests = call_api("GET", tests_url, headers)
        if not resp_tests:
            continue
        tests_json = resp_tests.json()
        for key, (type_name, api_path) in allowed_tests.items():
            for test in tests_json.get(key, []):
                test_id = test.get("testId")
                test_name = test.get("testName")
                if not test_id or not test_name:
                    continue
                # 3) Fetch recent results for this test
                results_url = f"{TE_API_BASE_URL}{api_path}/{test_id}/results?aid={aid}"
                resp_res = call_api("GET", results_url, headers)
                latest_data = None
                if resp_res:
                    res_list = resp_res.json().get("results", [])
                    if res_list:
                        latest_entry = max(res_list, key=lambda r: r.get("endTime", 0))
                        latest_data = latest_entry
                results.append(TestResult(
                    testId=test_id,
                    testName=test_name,
                    testType=type_name,
                    latestResult=latest_data
                ))

    if not results:
        raise HTTPException(status_code=404, detail=f"No tests found for app_id {app_id}")
    return results
