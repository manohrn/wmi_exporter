import requests
from requests.auth import HTTPBasicAuth

# -------------------
# CONFIGURATION
# -------------------
OPS_BASE_URL = "https://opsmanager.company.com/api/public/v1.0"  # Replace with real URL
OPS_USERNAME = "your-mongo-api-user"
OPS_API_KEY = "your-mongo-api-key"
ORG_ID = "your-org-id"

GRAFANA_AGENT_API = "https://your-grafana-agent-api/api/agent/v1"
GRAFANA_USERNAME = "your-grafana-username"
GRAFANA_PASSWORD = "your-grafana-password"

mongo_auth = HTTPBasicAuth(OPS_USERNAME, OPS_API_KEY)
grafana_auth = HTTPBasicAuth(GRAFANA_USERNAME, GRAFANA_PASSWORD)

# -------------------
# STEP 1: FETCH PROJECTS, CLUSTERS, HOSTS
# -------------------

def get_projects():
    url = f"{OPS_BASE_URL}/orgs/{ORG_ID}/groups"
    res = requests.get(url, auth=mongo_auth)
    res.raise_for_status()
    return res.json()["results"]

def get_clusters(project_id):
    url = f"{OPS_BASE_URL}/groups/{project_id}/clusters"
    res = requests.get(url, auth=mongo_auth)
    res.raise_for_status()
    return res.json()["results"]

def get_cluster_hosts(project_id, cluster_name):
    url = f"{OPS_BASE_URL}/groups/{project_id}/clusters/{cluster_name}/processes"
    res = requests.get(url, auth=mongo_auth)
    res.raise_for_status()
    return res.json()["results"]

def collect_top_hosts():
    output = []
    print("Fetching all MongoDB projects...")
    for project in get_projects():
        project_name = project["name"]
        project_id = project["id"]
        print(f"- Project: {project_name} ({project_id})")

        try:
            clusters = get_clusters(project_id)
        except Exception as e:
            print(f"  Error fetching clusters: {e}")
            continue

        for cluster in clusters:
            cluster_name = cluster["name"]
            try:
                hosts = get_cluster_hosts(project_id, cluster_name)
            except Exception as e:
                print(f"  Error fetching hosts for {cluster_name}: {e}")
                continue

            if not hosts:
                print(f"  No hosts found in cluster: {cluster_name}")
                continue

            top_host = sorted(hosts, key=lambda h: h.get("hostname", ""))[0]["hostname"]
            print(f"  Cluster: {cluster_name}, Top Host: {top_host}")

            output.append({
                "project_id": project_id,
                "project_name": project_name,
                "cluster_name": cluster_name,
                "hostname": top_host
            })

    return output

# -------------------
# STEP 2: PUSH TO GRAFANA AGENT USING PUT
# -------------------

def push_template_variable_to_agent(agent_id, data):
    payload = {
        "template_variables": {
            "mongodb_monitors": [data]
        }
    }

    url = f"{GRAFANA_AGENT_API}/instances/{agent_id}/labels"
    res = requests.put(url, auth=grafana_auth, json=payload)

    if res.status_code == 200:
        print(f"  [OK] Labels updated for agent_id: {agent_id}")
    else:
        print(f"  [FAIL] agent_id: {agent_id} - {res.status_code}: {res.text}")

# -------------------
# MAIN EXECUTION
# -------------------

if __name__ == "__main__":
    top_hosts = collect_top_hosts()
    for entry in top_hosts:
        agent_id = entry["hostname"]
        push_template_variable_to_agent(agent_id, entry)
