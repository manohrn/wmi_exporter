import os
import time
import logging
from datetime import datetime, timezone
from fastapi import FastAPI, HTTPException
import requests
from dotenv import load_dotenv

# -------------------------
# Load Environment Variables
# -------------------------
load_dotenv()
TE_API_TOKEN = os.getenv("TE_API_TOKEN")
HTTPS_PROXY = os.getenv("HTTPS_PROXY")
HTTP_PROXY = os.getenv("HTTP_PROXY")

proxies = {
    "http": HTTP_PROXY,
    "https": HTTPS_PROXY
} if HTTP_PROXY or HTTPS_PROXY else None

# -------------------------
# Setup Logging
# -------------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("ThousandEyesService")

# -------------------------
# Constants
# -------------------------
BASE_URL = "https://api.thousandeyes.com/v6"
ALLOWED_TEST_TYPES = {"agent-to-server", "http-server", "page-load", "web-transactions"}
app = FastAPI()

# -------------------------
# Rate-Limited Safe Request
# -------------------------
def make_request(url: str, max_retries: int = 5) -> requests.Response:
    headers = {"Authorization": f"Bearer {TE_API_TOKEN}"}
    buffer_threshold = 5
    retries = max_retries
    response = None

    while retries > 0:
        try:
            response = requests.get(url, headers=headers, timeout=10, proxies=proxies)

            rate_remaining = int(response.headers.get("x-organization-rate-limit-remaining", "100"))
            rate_reset = int(response.headers.get("x-organization-rate-limit-reset", str(int(time.time()) + 60)))
            utc_now = int(datetime.now(timezone.utc).timestamp())

            if rate_remaining <= buffer_threshold:
                wait_time = rate_reset - utc_now
                if wait_time > 0:
                    logger.warning(f"Rate limit low (remaining: {rate_remaining}). Sleeping {wait_time}s...")
                    time.sleep(wait_time)

            if response.status_code == 200:
                return response
            elif response.status_code == 429:
                logger.warning("429 Too Many Requests. Sleeping 10s...")
                time.sleep(10)
            elif 500 <= response.status_code < 600:
                logger.warning(f"Server error {response.status_code}. Retrying...")
                time.sleep(2)
            else:
                response.raise_for_status()

        except requests.RequestException as e:
            logger.error(f"Request error: {e}")
            time.sleep(2)

        retries -= 1

    raise HTTPException(status_code=502, detail=f"Failed to get data from ThousandEyes after retries: {url}")

# -------------------------
# API Endpoint
# -------------------------
@app.get("/test-results/{app_id}")
def get_test_results(app_id: str):
    logger.info(f"Received app_id: {app_id}")
    output = []

    # Step 1: Get all account groups
    acct_url = f"{BASE_URL}/account-groups.json"
    acct_resp = make_request(acct_url).json()
    account_groups = acct_resp.get("accountGroups", [])

    for ag in account_groups:
        aid = ag.get("aid")
        if not aid:
            continue

        # Step 2: Get labels (groups) in account group
        group_url = f"{BASE_URL}/groups.json?aid={aid}"
        groups = make_request(group_url).json().get("groups", [])

        # Step 3: Filter groups by distributed_app_ids:<app_id>
        matching_labels = [
            g for g in groups if f"distributed_app_ids:{app_id}" in g.get("name", "")
        ]
        if not matching_labels:
            continue

        for label in matching_labels:
            group_id = label.get("groupId")
            if not group_id:
                continue

            # Step 4: Get tests for the label
            label_url = f"{BASE_URL}/groups/{group_id}.json?aid={aid}"
            label_info = make_request(label_url).json().get("groups", [])
            if not label_info or not label_info[0].get("tests"):
                continue

            tests = label_info[0]["tests"]
            filtered_tests = [t for t in tests if t.get("type") in ALLOWED_TEST_TYPES]

            for test in filtered_tests:
                test_id = test["testId"]
                result_url = f"{BASE_URL}/tests/{test_id}/results.json?aid={aid}"
                result_data = make_request(result_url).json()

                output.append({
                    "accountGroupId": aid,
                    "test": test,
                    "latestResult": result_data
                })

    if not output:
        raise HTTPException(status_code=404, detail=f"No tests found for app_id: {app_id}")

    logger.info(f"Returning {len(output)} test results for app_id: {app_id}")
    return {"tests": output}
