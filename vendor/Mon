import requests
from requests.auth import HTTPBasicAuth

# -------------------
# CONFIGURATION
# -------------------
OPS_BASE_URL = "https://opsmanager.company.com/api/public/v1.0"  # Replace with your Ops Manager URL
OPS_USERNAME = "your-api-user"
OPS_API_KEY = "your-api-key"
ORG_ID = "your-org-id"

GRAFANA_AGENT_API = "https://your-grafana-cloud/api/agent/v1"
INSTANCE_ID = "your-instance-id"
GRAFANA_API_KEY = "Bearer your-grafana-fleet-api-token"

HEADERS = {
    "Authorization": GRAFANA_API_KEY,
    "Content-Type": "application/json"
}

auth = HTTPBasicAuth(OPS_USERNAME, OPS_API_KEY)

# -------------------
# STEP 1: FETCH FROM MONGODB OPS MANAGER
# -------------------

def get_projects():
    url = f"{OPS_BASE_URL}/orgs/{ORG_ID}/groups"
    res = requests.get(url, auth=auth)
    res.raise_for_status()
    return res.json()["results"]

def get_clusters(project_id):
    url = f"{OPS_BASE_URL}/groups/{project_id}/clusters"
    res = requests.get(url, auth=auth)
    res.raise_for_status()
    return res.json()["results"]

def get_cluster_nodes(project_id, cluster_name):
    url = f"{OPS_BASE_URL}/groups/{project_id}/clusters/{cluster_name}/processes"
    res = requests.get(url, auth=auth)
    res.raise_for_status()
    return res.json()["results"]

def get_top_nodes():
    results = []
    print("Fetching projects...")
    projects = get_projects()
    for project in projects:
        project_name = project["name"]
        project_id = project["id"]
        print(f"  Project: {project_name} ({project_id})")

        try:
            clusters = get_clusters(project_id)
        except Exception as e:
            print(f"    Error fetching clusters: {e}")
            continue

        for cluster in clusters:
            cluster_name = cluster["name"]
            try:
                nodes = get_cluster_nodes(project_id, cluster_name)
            except Exception as e:
                print(f"    Error fetching nodes for {cluster_name}: {e}")
                continue

            if not nodes:
                print(f"    No nodes found in cluster {cluster_name}")
                continue

            top_node = sorted(nodes, key=lambda x: x.get("hostname", ""))[0]
            results.append({
                "project_name": project_name,
                "project_id": project_id,
                "cluster_name": cluster_name,
                "top_node": top_node["hostname"]
            })
            print(f"    Top node: {top_node['hostname']}")
    return results

# -------------------
# STEP 2: BUILD TEMPLATE VARIABLE ENTRY
# -------------------

def build_template_variable(item):
    return {
        "project_name": item["project_name"],
        "project_id": item["project_id"],
        "cluster_name": item["cluster_name"],
        "node": item["top_node"]
    }

# -------------------
# STEP 3: GET EXISTING VARIABLES (for deduplication)
# -------------------

def get_existing_template_variables():
    url = f"{GRAFANA_AGENT_API}/instances/{INSTANCE_ID}/config"
    res = requests.get(url, headers=HEADERS)
    if res.status_code != 200:
        print("Error fetching existing config:", res.status_code, res.text)
        return []

    config = res.json()
    return config.get("template_variables", {}).get("mongodb_monitors", [])

# -------------------
# STEP 4: PUSH NEW ENTRIES TO API
# -------------------

def push_new_entries(new_entries, existing_entries):
    existing_keys = {
        (e["project_id"], e["cluster_name"], e["node"])
        for e in existing_entries
    }

    to_push = [
        entry for entry in new_entries
        if (entry["project_id"], entry["cluster_name"], entry["node"]) not in existing_keys
    ]

    if not to_push:
        print("No new template variables to push.")
        return

    payload = {
        "template_variables": {
            "mongodb_monitors": to_push
        }
    }

    url = f"{GRAFANA_AGENT_API}/instances/{INSTANCE_ID}/labels"
    res = requests.post(url, headers=HEADERS, json=payload)

    if res.status_code == 200:
        print(f"Pushed {len(to_push)} new template variables.")
    else:
        print(f"Failed to push variables: {res.status_code} - {res.text}")

# -------------------
# MAIN EXECUTION
# -------------------

if __name__ == "__main__":
    top_nodes = get_top_nodes()
    new_template_vars = [build_template_variable(item) for item in top_nodes]
    existing_template_vars = get_existing_template_variables()
    push_new_entries(new_template_vars, existing_template_vars)
