import os
import time
import json
import logging
from typing import List, Optional, Dict, Any
from datetime import datetime, timezone

import httpx
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
TE_API_TOKEN = os.getenv("TE_API_TOKEN")
TE_API_BASE_URL = os.getenv("TE_API_BASE_URL", "https://api.thousandeyes.com/v6")

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger("te_app")

# FastAPI app
app = FastAPI(title="ThousandEyes App ID Test Result API")

# Output model
class TestResult(BaseModel):
    testId: int
    testName: str
    testType: str
    latestResult: Optional[Dict[str, Any]]

# Helper: Async API call with rate limit + retry
async def call_api(method: str, url: str, headers: Dict[str, str], client: httpx.AsyncClient) -> Optional[Dict]:
    retries = 3
    for attempt in range(retries):
        try:
            response = await client.request(method, url, headers=headers, timeout=15)
            if response.status_code == 200:
                logger.info(f"Success: {url}")
                return response.json()
            elif response.status_code == 429:
                reset = int(response.headers.get("x-organization-rate-limit-reset", time.time() + 5))
                wait_time = max(reset - int(time.time()), 5)
                logger.warning(f"Rate limit hit. Waiting {wait_time}s")
                await asyncio.sleep(wait_time)
            elif 500 <= response.status_code < 600:
                logger.warning(f"Server error {response.status_code}, retrying...")
                await asyncio.sleep(2)
            else:
                logger.error(f"Unexpected status {response.status_code} from {url}")
                return None
        except Exception as e:
            logger.error(f"Request failed for {url}: {e}")
            await asyncio.sleep(2)
    return None

@app.get("/test-results/{app_id}", response_model=List[TestResult])
async def get_test_results(app_id: str):
    headers = {
        "Authorization": f"Bearer {TE_API_TOKEN}",
        "Content-Type": "application/json"
    }
    async with httpx.AsyncClient() as client:
        start_time = time.time()

        # Step 1: Get account groups
        logger.info("Step 1: Getting account groups")
        acct_url = f"{TE_API_BASE_URL}/account-groups.json"
        account_groups = await call_api("GET", acct_url, headers, client)
        if not account_groups:
            raise HTTPException(status_code=502, detail="Failed to retrieve account groups")

        # Step 2: Find matching AIDs with app_id in label
        logger.info("Step 2: Finding account groups with app_id in labels")
        matching_aids = []
        for group in account_groups.get("accountGroups", []):
            aid = group.get("aid")
            if not aid:
                continue
            label_url = f"{TE_API_BASE_URL}/groups.json?aid={aid}"
            label_data = await call_api("GET", label_url, headers, client)
            if not label_data:
                continue
            for label in label_data.get("groups", []):
                if f"distributed_app_ids:{app_id}" in label.get("name", ""):
                    matching_aids.append(aid)
                    break

        if not matching_aids:
            raise HTTPException(status_code=404, detail=f"No matching account groups for app_id: {app_id}")

        # Step 3: Fetch test results
        logger.info("Step 3: Fetching test results")
        allowed_tests = {
            "agentToServerTests": ("agent-to-server", "/tests/agent-to-server"),
            "httpServerTests": ("http-server", "/tests/http-server"),
            "pageLoadTests": ("page-load", "/tests/page-load"),
            "webTransactionTests": ("web-transactions", "/tests/web-transactions")
        }

        results: List[TestResult] = []
        for aid in matching_aids:
            test_url = f"{TE_API_BASE_URL}/tests.json?aid={aid}"
            test_data = await call_api("GET", test_url, headers, client)
            if not test_data:
                continue
            for key, (type_name, endpoint) in allowed_tests.items():
                for test in test_data.get(key, []):
                    test_id = test.get("testId")
                    test_name = test.get("testName")
                    if not test_id or not test_name:
                        continue
                    result_url = f"{TE_API_BASE_URL}{endpoint}/{test_id}/results.json?aid={aid}"
                    result_data = await call_api("GET", result_url, headers, client)
                    latest = None
                    try:
                        res_list = result_data.get("results", []) if result_data else []
                        if res_list:
                            latest = max(res_list, key=lambda r: r.get("endTime", ""))
                    except Exception as e:
                        logger.warning(f"Failed to parse result for test {test_id}: {e}")
                    results.append(TestResult(
                        testId=test_id,
                        testName=test_name,
                        testType=type_name,
                        latestResult=latest
                    ))

        if not results:
            raise HTTPException(status_code=404, detail=f"No test results found for app_id: {app_id}")

        # Step 4: Export to file
        filename = f"te_results_{app_id}_{int(time.time())}.json"
        with open(filename, "w", encoding="utf-8") as f:
            json.dump([r.dict() for r in results], f, indent=2)

        logger.info(f"Step 5: Completed in {round(time.time() - start_time, 2)} seconds. Saved to {filename}")
        return results
