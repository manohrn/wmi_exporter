import openpyxl
import yaml
import re
import subprocess

def get_fqdn_from_nslookup(host):
    """Runs nslookup and extracts the real FQDN."""
    try:
        output = subprocess.check_output(['nslookup', host], text=True, stderr=subprocess.DEVNULL)
        for line in output.splitlines():
            if line.strip().startswith("Name:"):
                return line.split("Name:")[1].strip()
        return host  # fallback if FQDN not found
    except Exception:
        return host  # fallback if nslookup fails

# Load Excel file (ensure it's closed before running)
excel_file = "ping_updated.xlsx"
wb = openpyxl.load_workbook(excel_file)
sheet = wb.active

# Map headers to column indexes
headers = {cell.value.strip(): idx for idx, cell in enumerate(sheet[1])}
yaml_output = []

# Loop through each row
for row in sheet.iter_rows(min_row=2, values_only=True):
    try:
        name = row[headers["name"]]
        group = row[headers["group"]]
        frequency = row[headers["frequency"]]
        host = row[headers["host"]]
        tags = str(row[headers["tags"]])

        # Skip invalid or empty host
        if not host or not isinstance(host, str):
            print(f"Skipping row with invalid host: {row}")
            continue

        # Extract App ID and BASEMON
        app_id = "unknown"
        basemon = "no"
        bracket_groups = re.findall(r"\[(.*?)\]", tags)

        if len(bracket_groups) >= 1:
            parts = bracket_groups[0].split(",")
            if len(parts) > 1:
                app_id = parts[1].strip()

        if len(bracket_groups) >= 2 and "basemon" in bracket_groups[1].lower():
            basemon = "yes"

        # Real nslookup call to get FQDN
        fqdn = get_fqdn_from_nslookup(host)

        # Construct YAML block
        yaml_output.append({
            "targets": [host],
            "labels": {
                "name": name,
                "module": "icmp",
                "monitor_type": "ping",
                "group": group,
                "frequency": f"{int(frequency) // 60} minutes",
                "host": host,
                "fqdn": fqdn,
                "app_id": app_id,
                "basemon": basemon
            }
        })

    except Exception as e:
        print(f"Error processing row: {row}\n{e}")
        continue

# Save the YAML
output_file = "ping_monitor_output.yaml"
with open(output_file, "w", encoding="utf-8") as f:
    yaml.dump(yaml_output, f, sort_keys=False)

print(f"\nYAML file '{output_file}' generated successfully.")
