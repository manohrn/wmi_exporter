Here‚Äôs an optimized OpenTelemetry Collector configuration for Linux host metrics only (without logs). This configuration collects Linux system performance metrics and exports them to Splunk Observability Cloud. It is tailored for efficiency, filtering, and metadata enrichment, focusing solely on metrics.

üöÄ Optimized Linux Metrics-Only Configuration

receivers:
  hostmetrics:
    collection_interval: 30s  # Collect metrics every 30 seconds
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true  # Enable CPU utilization metric
      disk:
        metrics:
          system.disk.io:
            enabled: true  # Enable disk I/O monitoring
      filesystem:
      memory:
      network:
      paging:
      processes:

processors:
  batch:
    send_batch_size: 200
    timeout: 10s  # Send batches every 10 seconds

  memory_limiter:
    limit_mib: 512  # Limit memory usage to 512MB
    spike_limit_mib: 128

  filter:
    metrics:
      exclude:
        match_type: strict
        metric_names:
          - "system.disk.inodes.usage"  # Exclude unnecessary inode metrics
          - "system.network.packets.drop"  # Reduce noise for dropped packets

  resource:
    attributes:
      - key: host.name
        from_attribute: host.name
      - key: environment
        value: "production"
      - key: os.type
        from_attribute: os.type
      - key: os.version
        from_attribute: os.version
      - key: datacenter
        value: "DC-North"  # Custom attribute for grouping hosts

exporters:
  signalfx:
    access_token: "<YOUR_ACCESS_TOKEN>"  # Splunk Observability Cloud token
    realm: "us1"  # Change to your SignalFx realm (e.g., us0, us1, eu0)
    metrics:
      translation_rules: []

service:
  pipelines:
    metrics:
      receivers: [hostmetrics]
      processors: [batch, memory_limiter, filter, resource]
      exporters: [signalfx]

üîπ Key Features & Enhancements

1Ô∏è‚É£ Metrics-Only Focus
	‚Ä¢	Hostmetrics receiver:
	‚Ä¢	Collects Linux system metrics only (no logs or traces).
	‚Ä¢	Captures key performance metrics:
	‚Ä¢	CPU: Tracks CPU utilization.
	‚Ä¢	Memory: Tracks RAM usage.
	‚Ä¢	Disk: Monitors disk I/O and usage.
	‚Ä¢	Filesystem: Reports storage space availability.
	‚Ä¢	Network: Tracks data sent/received over network interfaces.
	‚Ä¢	Processes: Counts running processes and their states.

2Ô∏è‚É£ Optimized Performance
	‚Ä¢	Collection interval: Set to 30 seconds for near real-time monitoring.
	‚Ä¢	Batch processor:
	‚Ä¢	Groups metrics into batches of 200 records or sends data every 10 seconds.
	‚Ä¢	Memory limiter:
	‚Ä¢	Limits Collector‚Äôs memory usage to 512MB, with a spike limit of 128MB.

3Ô∏è‚É£ Advanced Metric Filtering
	‚Ä¢	Exclude unnecessary metrics to reduce noise and focus on important data:
	‚Ä¢	Excludes metrics like:
	‚Ä¢	system.disk.inodes.usage: Not as relevant for monitoring Linux hosts.
	‚Ä¢	system.network.packets.drop: Reduces noise for dropped packets.

4Ô∏è‚É£ Enhanced Metadata for Context
	‚Ä¢	Adds host-specific metadata using the resource processor:
	‚Ä¢	host.name: Identifies the hostname.
	‚Ä¢	os.type & os.version: Provides OS details (e.g., Linux kernel version).
	‚Ä¢	environment: Tags the host as part of the ‚Äúproduction‚Äù environment.
	‚Ä¢	datacenter: A custom attribute for grouping Linux hosts (e.g., ‚ÄúDC-North‚Äù).

5Ô∏è‚É£ Exporter to Splunk Observability
	‚Ä¢	Uses Signalfx exporter to send metrics to Splunk Observability Cloud.
	‚Ä¢	Requires:
	‚Ä¢	access_token: Your Splunk Observability token.
	‚Ä¢	realm: Your SignalFx realm (e.g., us0, us1, eu0).

üìå Deployment Steps

Step 1: Install the Collector
	‚Ä¢	Install the Splunk OpenTelemetry Collector for Linux:
	‚Ä¢	Follow the installation guide.
	‚Ä¢	Save the above configuration to:

/etc/otel/collector/agent_config.yaml



Step 2: Configure Access Token & Realm
	‚Ä¢	Replace <YOUR_ACCESS_TOKEN> with your Splunk Observability Cloud token.
	‚Ä¢	Update realm: "us1" to match your region (e.g., us0, eu0).

Step 3: Restart the Collector

sudo systemctl restart splunk-otel-collector

Step 4: Verify Metrics in Splunk
	‚Ä¢	Log in to Splunk Observability Cloud.
	‚Ä¢	Go to Infrastructure or Metrics Explorer.
	‚Ä¢	Search for metrics like system.cpu.utilization or system.memory.usage.

üéØ Why Use This Configuration?

‚úÖ Focused on Metrics ‚Üí Collects essential performance data without logs or traces.
‚úÖ Efficient ‚Üí Filters out irrelevant metrics, optimizes memory usage, and batches data.
‚úÖ Custom Metadata ‚Üí Adds context (e.g., environment, datacenter) for better filtering in Splunk.
‚úÖ Real-Time Insights ‚Üí Reduced collection interval (30 seconds) for timely updates.

This configuration ensures efficient Linux host monitoring and seamless integration with Splunk Observability Cloud. Let me know if you need further enhancements or specific metrics included! üöÄ
