import os
import logging
from fastapi import FastAPI, HTTPException
from dotenv import load_dotenv
import pymssql
import httpx

# Load configuration from .env file into environment variables
load_dotenv()  # Loads environment variables from .env [oai_citation:3‡dev.to](https://dev.to/yanagisawahidetoshi/efficiently-using-environment-variables-in-fastapi-4lal#:~:text=import%20os%20from%20dotenv%20import,load_dotenv)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Read required configuration from environment
DB_SERVER   = os.getenv("DB_SERVER")
DB_PORT     = os.getenv("DB_PORT")
DB_USER     = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_NAME     = os.getenv("DB_NAME")
TE_API_TOKEN= os.getenv("TE_API_TOKEN")
TE_EMAIL    = os.getenv("TE_EMAIL")       # optional
TE_API_BASE = os.getenv("TE_API_BASE_URL")
# Proxy settings (HTTP_PROXY/HTTPS_PROXY) are loaded via environment and httpx will use them by default [oai_citation:4‡python-httpx.org](https://www.python-httpx.org/environment_variables/#:~:text=)

# Validate required configuration
required_vars = [("DB_SERVER", DB_SERVER), ("DB_PORT", DB_PORT), ("DB_USER", DB_USER),
                 ("DB_PASSWORD", DB_PASSWORD), ("DB_NAME", DB_NAME),
                 ("TE_API_TOKEN", TE_API_TOKEN), ("TE_API_BASE_URL", TE_API_BASE)]
missing = [name for name, val in required_vars if not val]
if missing:
    logger.error(f"Missing required configuration variables: {missing}")
    # If any required config is missing, we raise an exception on startup
    raise RuntimeError(f"Configuration error: Missing {', '.join(missing)}")

# Initialize FastAPI app
app = FastAPI()

def remove_links(data):
    """Recursively remove all '_links' keys from dictionaries/lists."""
    if isinstance(data, dict):
        # Use dict comprehension to exclude '_links'
        return {k: remove_links(v) for k, v in data.items() if k != "_links"}
    elif isinstance(data, list):
        return [remove_links(item) for item in data]
    else:
        return data

@app.get("/app-tests/{app_id}")
def get_app_tests(app_id: int):
    """Retrieve test results from ThousandEyes for all accounts associated with the given app_id."""
    # Step 1: Connect to the database and get list of AIDs for the app_id
    try:
        conn = pymssql.connect(server=DB_SERVER, port=int(DB_PORT), 
                               user=DB_USER, password=DB_PASSWORD, database=DB_NAME)
    except Exception as e:
        logger.error("Database connection failed", exc_info=True)
        raise HTTPException(status_code=500, detail="Database connection failed")
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT Aid FROM app_account_mapping WHERE app_id = %s", (app_id,))
        rows = cursor.fetchall()
        aids = [row[0] for row in rows]
    except Exception as e:
        logger.error(f"Database query failed for app_id {app_id}", exc_info=True)
        raise HTTPException(status_code=500, detail="Database query failed")
    finally:
        conn.close()
    if not aids:
        # No account group found for this app_id
        logger.info(f"No account mapping found for app_id {app_id}")
        raise HTTPException(status_code=404, detail=f"No accounts found for app_id {app_id}")

    result_data = {"app_id": app_id, "tests": []}

    # Step 2: For each AID, fetch tests and then results from ThousandEyes API
    for aid in aids:
        logger.info(f"Processing account (aid={aid}) for app_id {app_id}")
        # Prepare URL for fetching tests in this account group
        tests_url = f"{TE_API_BASE}/tests?aid={aid}"
        try:
            # Use httpx to get the list of tests for this aid
            if TE_EMAIL:
                # If email is provided, use Basic Auth (email & token) [oai_citation:5‡python-httpx.org](https://www.python-httpx.org/quickstart/#:~:text=To%20provide%20Basic%20authentication%20credentials%2C,argument%20to%20the%20request%20functions)
                response = httpx.get(tests_url, auth=(TE_EMAIL, TE_API_TOKEN), timeout=10.0)
            else:
                # Otherwise use Bearer token in header
                headers = {"Authorization": f"Bearer {TE_API_TOKEN}"}
                response = httpx.get(tests_url, headers=headers, timeout=10.0)
        except httpx.HTTPError as e:
            logger.error(f"Failed to fetch tests for aid {aid}: {e}", exc_info=True)
            continue  # skip this aid on network error

        if response.status_code != 200:
            logger.error(f"ThousandEyes API returned status {response.status_code} for tests (aid={aid})")
            continue  # skip this aid if unauthorized or other error

        # Parse the tests list
        try:
            tests_data = response.json()
        except ValueError:
            logger.error(f"Invalid JSON in tests response for aid {aid}")
            continue

        tests_list = tests_data.get("tests", [])  # assuming the API returns a "tests" array
        if not tests_list:
            logger.info(f"No tests found for aid {aid} (or no tests of the specified types).")
        # Filter tests by type
        for test in tests_list:
            t_type = test.get("type")
            if t_type not in ("agent-to-server", "http-server", "page-load", "web-transactions"):
                continue  # skip tests that are not of the desired types
            test_id   = test.get("testId") or test.get("id")  # some APIs may use "id" instead of "testId"
            test_name = test.get("testName") or test.get("name")
            if not test_id or not test_name or not t_type:
                # Skip if essential info is missing
                continue

            # Determine the appropriate results endpoint for this test type
            if t_type == "agent-to-server":
                endpoint = f"/test-results/{test_id}/network"
            elif t_type == "http-server":
                endpoint = f"/test-results/{test_id}/http-server"
            elif t_type == "page-load":
                endpoint = f"/test-results/{test_id}/page-load"
            elif t_type == "web-transactions":
                endpoint = f"/test-results/{test_id}/web-transactions"
            else:
                # (Should not happen due to filter, but included for completeness)
                continue
            results_url = f"{TE_API_BASE}{endpoint}?window=5m&format=json"

            # Fetch the test result data
            try:
                if TE_EMAIL:
                    result_resp = httpx.get(results_url, auth=(TE_EMAIL, TE_API_TOKEN), timeout=10.0)
                else:
                    result_resp = httpx.get(results_url, headers=headers, timeout=10.0)
            except httpx.HTTPError as e:
                logger.error(f"Failed to fetch results for testId {test_id} (aid={aid}): {e}", exc_info=True)
                continue

            if result_resp.status_code != 200:
                logger.warning(f"Non-200 status for testId {test_id} results (aid={aid}): {result_resp.status_code}")
                continue
            try:
                result_json = result_resp.json()
            except ValueError:
                logger.error(f"Invalid JSON in result for testId {test_id} (aid={aid})")
                continue

            # Remove any "_links" fields from the result JSON
            cleaned_result = remove_links(result_json)
            # Append to output list
            result_data["tests"].append({
                "aid": aid,
                "testId": test_id,
                "testName": test_name,
                "type": t_type,
                "result": cleaned_result
            })

    # If we didn't gather any tests at all, return an error
    if not result_data["tests"]:
        logger.error(f"No test results could be retrieved for app_id {app_id}")
        raise HTTPException(status_code=500, detail="Failed to retrieve any test results")
    # Return the aggregated JSON data
    return result_data
