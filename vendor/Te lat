import os
import logging
from fastapi import FastAPI, HTTPException, Body
from dotenv import load_dotenv
import pymssql
import requests

# Load environment variables
load_dotenv()

# Setup logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# Environment configuration
DB_SERVER = os.getenv("DB_SERVER")
DB_PORT = int(os.getenv("DB_PORT", "1433"))
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_NAME = os.getenv("DB_NAME")
TE_API_TOKEN = os.getenv("TE_API_TOKEN")
TE_API_BASE_URL = os.getenv("TE_API_BASE_URL")
HTTP_PROXY = os.getenv("HTTP_PROXY", "")
HTTPS_PROXY = os.getenv("HTTPS_PROXY", "")

# Proxy setup
proxies = {}
if HTTP_PROXY:
    proxies["http"] = HTTP_PROXY
if HTTPS_PROXY:
    proxies["https"] = HTTPS_PROXY

# FastAPI app
app = FastAPI()

# Utility: remove _links from nested JSON
def remove_links(data):
    if isinstance(data, dict):
        return {k: remove_links(v) for k, v in data.items() if k not in ("_links", "links")}
    elif isinstance(data, list):
        return [remove_links(i) for i in data]
    return data

# Endpoint to get test results
@app.post("/get-test-results")
def get_test_results(payload: dict = Body(..., example={"app_id": "netops"})):
    app_id = payload.get("app_id")
    if not app_id:
        raise HTTPException(status_code=422, detail="app_id is required in payload")
    logger.info(f"Fetching test results for App ID: {app_id}")

    # Get AIDs from DB
    try:
        with pymssql.connect(server=DB_SERVER, port=DB_PORT, user=DB_USER,
                             password=DB_PASSWORD, database=DB_NAME) as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT DISTINCT Aid FROM dbo.t_ThousandEyes_Tests WITH (NOLOCK) WHERE AppIds = %s",
                    (app_id,)
                )
                rows = cursor.fetchall()
    except Exception as e:
        logger.error(f"DB error: {e}")
        raise HTTPException(status_code=500, detail="Database error fetching AIDs")

    if not rows:
        logger.warning("No AIDs found for App ID: %s", app_id)
        raise HTTPException(status_code=404, detail=f"No AIDs found for app_id '{app_id}'")

    aids = [row[0] for row in rows]
    logger.info("Found AIDs: %s", aids)

    allowed_types = {"agent-to-server", "http-server", "page-load", "web-transactions"}
    headers = {
        "Authorization": f"Bearer {TE_API_TOKEN}",
        "Accept": "application/json"
    }

    results = []

    for aid in aids:
        try:
            test_resp = requests.get(
                f"{TE_API_BASE_URL.rstrip('/')}/tests",
                headers=headers,
                params={"aid": aid},
                proxies=proxies,
                timeout=15
            )
            test_resp.raise_for_status()
            all_tests = test_resp.json().get("tests", [])
        except Exception as e:
            logger.error(f"Error fetching tests for AID {aid}: {e}")
            continue

        for test in all_tests:
            test_type = str(test.get("type", "")).lower()
            if test_type not in allowed_types:
                continue
            test_id = test.get("testId")
            if not test_id:
                continue

            # Adjust endpoint path based on type
            path = "network" if test_type == "agent-to-server" else test_type
            try:
                res = requests.get(
                    f"{TE_API_BASE_URL.rstrip('/')}/test-results/{test_id}/{path}",
                    headers=headers,
                    params={"window": "5m"},
                    proxies=proxies,
                    timeout=15
                )
                res.raise_for_status()
                result_data = remove_links(res.json())
                clean_meta = remove_links(test)
                clean_meta["results"] = result_data.get("results", result_data)
                clean_meta["aid"] = aid
                results.append(clean_meta)
            except Exception as e:
                logger.error(f"Error fetching result for test {test_id}: {e}")
                continue

    return {
        "app_id": app_id,
        "aid_count": len(aids),
        "test_count": len(results),
        "tests": results
    }
