Here‚Äôs an optimized OpenTelemetry Collector configuration for Windows host metrics only (without logs). This config is designed to efficiently collect and send host metrics to Splunk Observability Cloud with enhanced metadata, filtering, and optimized performance.

üöÄ Optimized Windows Metrics-Only Configuration

receivers:
  hostmetrics:
    collection_interval: 30s  # Collect metrics every 30 seconds
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true  # Enable CPU utilization metric
      disk:
        metrics:
          system.disk.io:
            enabled: true  # Enable disk I/O monitoring
      filesystem:
      memory:
      network:
      paging:
      processes:

processors:
  batch:
    send_batch_size: 200
    timeout: 10s  # Send batches every 10 seconds

  memory_limiter:
    limit_mib: 512  # Limit memory usage to 512MB
    spike_limit_mib: 128

  filter:
    metrics:
      exclude:
        match_type: strict
        metric_names:
          - "system.disk.inodes.usage"  # Exclude unnecessary inodes metric for Windows
          - "system.network.packets.drop"  # Reduce noise

  resource:
    attributes:
      - key: host.name
        from_attribute: host.name
      - key: environment
        value: "production"
      - key: os.type
        from_attribute: os.type
      - key: os.version
        from_attribute: os.version
      - key: datacenter
        value: "DC-East"  # Custom attribute for grouping hosts

exporters:
  signalfx:
    access_token: "<YOUR_ACCESS_TOKEN>"
    realm: "us1"  # Change to your Splunk Observability realm (e.g., us0, eu0)
    metrics:
      translation_rules: []

service:
  pipelines:
    metrics:
      receivers: [hostmetrics]
      processors: [batch, memory_limiter, filter, resource]
      exporters: [signalfx]

üîπ Key Features & Enhancements

1Ô∏è‚É£ Focused on Host Metrics Only
	‚Ä¢	Removes logs (windows_event_log & filelog receivers are removed).
	‚Ä¢	Keeps only system performance metrics (CPU, Memory, Disk, Network, etc.).

2Ô∏è‚É£ Optimized Data Collection
	‚Ä¢	Collection interval set to 30s for near real-time monitoring.
	‚Ä¢	Batch sending every 10s or 200 records for efficiency.
	‚Ä¢	Memory limiter (512MB) to prevent excessive memory use.

3Ô∏è‚É£ Intelligent Metric Filtering
	‚Ä¢	Excludes unnecessary metrics (e.g., system.disk.inodes.usage for Windows).
	‚Ä¢	Retains key performance metrics like:
	‚Ä¢	CPU utilization
	‚Ä¢	Memory usage
	‚Ä¢	Disk I/O
	‚Ä¢	Network activity
	‚Ä¢	Process counts

4Ô∏è‚É£ Enhanced Metadata for Better Context
	‚Ä¢	Adds useful labels (resource processor):
	‚Ä¢	host.name: Identifies the hostname.
	‚Ä¢	environment: Marks as ‚Äúproduction‚Äù.
	‚Ä¢	os.type & os.version: Provides OS details.
	‚Ä¢	datacenter: Custom grouping tag (modify as needed).

5Ô∏è‚É£ Direct Export to Splunk Observability
	‚Ä¢	Uses signalfx exporter for Splunk Observability Cloud.
	‚Ä¢	Requires:
	‚Ä¢	access_token: Your Splunk Observability access token.
	‚Ä¢	realm: Your Splunk region (e.g., us0, us1, eu0).

üìå Deployment Steps

Step 1: Install the Collector
	‚Ä¢	Follow Splunk OpenTelemetry Collector for Windows installation guide.
	‚Ä¢	Save this config as:

C:\Program Files\Splunk\OpenTelemetry Collector\agent_config.yaml



Step 2: Configure Access Token & Realm
	‚Ä¢	Replace <YOUR_ACCESS_TOKEN> with your Splunk Observability Cloud token.
	‚Ä¢	Update realm: "us1" to match your region (e.g., us0, eu0).

Step 3: Restart the Collector

net stop splunk-otel-collector
net start splunk-otel-collector

Step 4: Verify Metrics in Splunk
	‚Ä¢	Log in to Splunk Observability Cloud.
	‚Ä¢	Go to Infrastructure or Metrics Explorer.
	‚Ä¢	Search for metrics like system.cpu.utilization.

üéØ Why Use This Config?

‚úÖ Focused on Metrics ‚Üí No extra log processing, just system performance data.
‚úÖ Efficient Data Collection ‚Üí Batched sending, 30s interval for real-time insights.
‚úÖ Reduced Noise ‚Üí Filters out unnecessary system metrics.
‚úÖ Better Context ‚Üí Adds host metadata for better filtering in Splunk.
‚úÖ Optimized Performance ‚Üí Prevents excessive resource usage.

This config ensures clean, efficient, and structured telemetry data is sent to Splunk Observability Cloud without extra logs.

Let me know if you need further customizations! üöÄ
