import requests
import json
import os
import certifi

# API endpoint and token (Replace with your actual values)
API_URL = "https://api.us1.signalfx.com/v2/detector"
API_TOKEN = "d37LbKF84b5q7sWH43N1Q"  # Replace with your actual token

# Headers
HEADERS = {
    "X-SF-TOKEN": API_TOKEN,
    "Content-Type": "application/json"
}

# Output directory & file
OUTPUT_DIR = "splunk_data"
OUTPUT_FILE = os.path.join(OUTPUT_DIR, "detectors.json")

# Ensure output directory exists
os.makedirs(OUTPUT_DIR, exist_ok=True)

# Disable SSL revocation check (equivalent to --ssl-no-revoke)
VERIFY_SSL = certifi.where()  # Uses system CA certificates safely

def fetch_detectors():
    """Fetch detectors from Splunk Observability API and save to a local file."""
    try:
        print("üîÑ Fetching detectors...")
        response = requests.get(API_URL, headers=HEADERS, verify=VERIFY_SSL, timeout=30)
        response.raise_for_status()  # Raise HTTP errors (4xx, 5xx)

        # Save response to a file
        with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
            json.dump(response.json(), f, indent=4, ensure_ascii=False)

        print(f"‚úÖ Successfully saved detectors to {OUTPUT_FILE}")

    except requests.exceptions.Timeout:
        print("‚è≥ Error: Request timed out. Try increasing the timeout or check your internet connection.")

    except requests.exceptions.SSLError:
        print("üîí SSL Error: Certificate verification failed. Try disabling SSL verification (not recommended for production).")

    except requests.exceptions.HTTPError as http_err:
        if response.status_code == 401:
            print("üö® Authentication Error (401): Invalid API token or insufficient permissions.")
        elif response.status_code == 403:
            print("üö´ Forbidden (403): Your API token does not have access to this resource.")
        elif response.status_code == 404:
            print("‚ùå Not Found (404): The requested API endpoint does not exist.")
        elif response.status_code == 429:
            print("‚ö†Ô∏è Rate Limit Exceeded (429): Too many requests. Try again later.")
        elif response.status_code == 500:
            print("üí• Server Error (500): Splunk Observability Cloud is experiencing issues.")
        elif response.status_code == 504:
            print("‚è≥ Gateway Timeout (504): API is taking too long to respond.")
        else:
            print(f"‚ùå HTTP Error {response.status_code}: {http_err}")

    except requests.exceptions.RequestException as req_err:
        print(f"üî¥ Unexpected Error: {req_err}")

    except UnicodeEncodeError:
        print("üìù Unicode Encoding Error: Ensure UTF-8 encoding is used when saving the response.")

if __name__ == "__main__":
    fetch_detectors()
