import os
import time
import datetime
import logging
import requests

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()
TE_API_TOKEN = os.getenv("TE_API_TOKEN")
TE_API_BASE_URL = os.getenv("TE_API_BASE_URL", "https://api.thousandeyes.com/v6")
RATE_LIMIT_BUFFER = int(os.getenv("RATE_LIMIT_BUFFER", "5"))

# Proxy support
proxies = {}
http_proxy = os.getenv("HTTP_PROXY") or os.getenv("http_proxy")
https_proxy = os.getenv("HTTPS_PROXY") or os.getenv("https_proxy")
if http_proxy:
    proxies["http"] = http_proxy
if https_proxy:
    proxies["https"] = https_proxy

# Logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger(__name__)

# Safe API call with Basic Auth and retry
def call_api(method: str, url: str, headers: Dict[str, str], payload: Optional[Any] = None) -> Optional[Dict]:
    retries = 3
    delay = 3
    for attempt in range(retries):
        try:
            response = requests.request(
                method,
                url,
                auth=(TE_API_TOKEN, "x"),  # Basic Auth: token:x
                headers=headers,
                json=payload,
                proxies=proxies,
                timeout=15
            )
            if response.status_code == 200:
                try:
                    return response.json()
                except Exception as e:
                    logger.error(f"JSON decode failed for {url}: {e}")
                    logger.error(f"Raw response text: {response.text}")
                    return None
            elif response.status_code == 429:
                logger.warning(f"Rate limit hit. Retrying after {delay}s...")
                time.sleep(delay)
            elif 500 <= response.status_code < 600:
                logger.warning(f"Server error {response.status_code}. Retrying...")
                time.sleep(delay)
            else:
                logger.error(f"Unexpected status {response.status_code} from {url}")
                logger.error(f"Response text: {response.text}")
                return None
        except Exception as ex:
            logger.error(f"Request failed to {url}: {ex}")
            time.sleep(delay)
    logger.error(f"Failed to get valid response after {retries} attempts: {url}")
    return None

# Output model
class TestResult(BaseModel):
    testId: int
    testName: str
    testType: str
    latestResult: Optional[Dict[str, Any]]

# FastAPI app
app = FastAPI(title="ThousandEyes App ID Test Result API")

@app.get("/test-results/{app_id}", response_model=List[TestResult])
async def get_test_results(app_id: str):
    headers = {"Content-Type": "application/json"}

    # Step 1: Get all account groups
    acct_url = f"{TE_API_BASE_URL}/account-groups.json"
    account_groups = call_api("GET", acct_url, headers)
    if not account_groups:
        raise HTTPException(status_code=502, detail="Failed to fetch account groups")

    # Step 2: Find AIDs linked to app_id via labels
    matching_aids = []
    for group in account_groups.get("accountGroups", []):
        aid = group.get("aid")
        if not aid:
            continue
        label_url = f"{TE_API_BASE_URL}/groups.json?aid={aid}"
        label_data = call_api("GET", label_url, headers)
        if not label_data:
            continue
        for label in label_data.get("groups", []):
            if f"distributed_app_ids:{app_id}" in label.get("name", ""):
                matching_aids.append(aid)
                break

    if not matching_aids:
        raise HTTPException(status_code=404, detail=f"No matching labels found for app_id: {app_id}")

    # Step 3: Fetch tests for each aid
    allowed_tests = {
        "agentToServerTests": ("agent-to-server", "/tests/agent-to-server"),
        "httpServerTests": ("http-server", "/tests/http-server"),
        "pageLoadTests": ("page-load", "/tests/page-load"),
        "webTransactionTests": ("web-transactions", "/tests/web-transactions")
    }

    results: List[TestResult] = []
    for aid in matching_aids:
        test_url = f"{TE_API_BASE_URL}/tests.json?aid={aid}"
        test_data = call_api("GET", test_url, headers)
        if not test_data:
            continue
        for key, (type_name, endpoint) in allowed_tests.items():
            for test in test_data.get(key, []):
                test_id = test.get("testId")
                test_name = test.get("testName")
                if not test_id or not test_name:
                    continue
                result_url = f"{TE_API_BASE_URL}{endpoint}/{test_id}/results.json?aid={aid}"
                result_data = call_api("GET", result_url, headers)
                latest = None
                try:
                    res_list = result_data.get("results", []) if result_data else []
                    if res_list:
                        latest = max(res_list, key=lambda r: r.get("endTime", ""))
                except Exception as e:
                    logger.warning(f"Failed to parse result for test {test_id}: {e}")

                results.append(TestResult(
                    testId=test_id,
                    testName=test_name,
                    testType=type_name,
                    latestResult=latest
                ))

    if not results:
        raise HTTPException(status_code=404, detail=f"No test results found for app_id: {app_id}")

    return results
