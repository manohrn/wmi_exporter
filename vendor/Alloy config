logging {
  level  = "info"
  format = "logfmt"
}

prometheus.exporter.blackbox "integrations_blackbox" {
  config = <<EOT
modules:
  tcp_connect:
    prober: tcp
    timeout: 60s
    tcp:
  icmp:
    prober: icmp
    timeout: 5s
    preferred_ip_protocol: "ipv4"
EOT

  probe_timeout_offset = "45s"
  targets = append(discovery.file.tcp.targets, discovery.file.icmp.targets)
}

discovery.file "tcp" {
  files = ["blackbox_tcp.yaml"]
}

discovery.file "icmp" {
  files = ["blackbox_icmp.yaml"]
}

discovery.relabel "integrations_blackbox_tcp" {
  targets = discovery.file.tcp.targets

  rule {
    target_label = "job"
    replacement  = "integrations/blackbox_tcp"
  }

  rule {
    source_labels = ["__param_target"]
    target_label  = "failed_target"
    regex         = ".*"
  }
}

discovery.relabel "integrations_blackbox_icmp" {
  targets = discovery.file.icmp.targets

  rule {
    source_labels = ["__param_target"]
    target_label  = "instance"
  }

  rule {
    target_label = "job"
    replacement  = "integrations/blackbox_icmp"
  }
}

prometheus.scrape "integrations_blackbox_tcp" {
  targets    = discovery.relabel.integrations_blackbox_tcp.output
  forward_to = [prometheus.remote_write.integrations.receiver]
  job_name   = "blackbox_tcp"
  scrape_interval = "120s"
  scrape_timeout  = "60s"
}

prometheus.scrape "integrations_blackbox_icmp" {
  targets    = discovery.relabel.integrations_blackbox_icmp.output
  forward_to = [prometheus.remote_write.integrations.receiver]
  job_name   = "blackbox_icmp"
  scrape_interval = "60s"
  scrape_timeout  = "30s"
}

prometheus.exporter.windows "integrations_windows_exporter" {
  enabled_collectors = ["cpu", "cs", "logical_disk", "net", "os", "service", "system", "time", "diskdrive"]
}

discovery.relabel "integrations_windows_exporter" {
  targets = prometheus.exporter.windows.integrations_windows_exporter.targets

  rule {
    target_label = "job"
    replacement  = "integrations/windows_exporter"
  }

  rule {
    target_label = "instance"
    replacement  = constants.hostname
  }
}

prometheus.scrape "integrations_windows_exporter" {
  targets    = discovery.relabel.integrations_windows_exporter.output
  forward_to = [prometheus.remote_write.integrations.receiver]
  job_name   = "windows_exporter"
  scrape_interval = "60s"
  scrape_timeout  = "30s"
}

prometheus.remote_write "integrations" {
  endpoint {
    url = "https://prometheus-dedicated-14-prod-us-central-0.grafana.net/api/prom/push"

    basic_auth {
      username = "YOUR_USERNAME"
      password = "YOUR_PASSWORD"
    }

    proxy_url = "http://proxy.wellsfargo.com:8080"
  }

  queue_config {
    capacity           = 5000
    max_shards         = 10
    max_samples_per_send = 1000
  }
}
