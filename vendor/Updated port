import openpyxl
import yaml
import subprocess
import re
import ipaddress
from concurrent.futures import ThreadPoolExecutor, as_completed

# ----------------------------
# Resolve FQDN from input (IP or hostname)
# ----------------------------
def get_fqdn_from_nslookup(host):
    try:
        output = subprocess.check_output(['nslookup', host], text=True, stderr=subprocess.DEVNULL)
        lines = output.strip().splitlines()

        for line in lines:
            if line.strip().lower().startswith("name:"):
                return line.split(":", 1)[1].strip().lower()
            if "name =" in line.lower():
                return line.split("=", 1)[1].strip().lower()

        return host.lower()  # fallback
    except Exception:
        return host.lower()

# ----------------------------
# Extract hostname or retain IP
# ----------------------------
def extract_hostname(value):
    try:
        ipaddress.ip_address(value)
        return value  # it's an IP, return as-is
    except ValueError:
        return value.split('.')[0].lower()  # it's FQDN or hostname

# ----------------------------
# Load Excel and parse rows
# ----------------------------
excel_file = "port_updated.xlsx"
wb = openpyxl.load_workbook(excel_file)
sheet = wb.active

headers = {cell.value.strip().lower(): idx for idx, cell in enumerate(sheet[1])}
rows_to_process = []

for row in sheet.iter_rows(min_row=2, values_only=True):
    try:
        name = str(row[headers["name"]]).strip().lower()
        group = str(row[headers["group"]]).strip().lower()
        frequency = int(row[headers["frequency"]])
        host = str(row[headers["host"]]).strip().lower()
        port = str(row[headers["port"]]).strip() if "port" in headers and row[headers["port"]] else None
        tags = str(row[headers["tags"]]).strip()
        type_ = str(row[headers["type"]]).strip().lower()

        if not host:
            continue

        # Parse app_id and basemon from tags
        app_id = "unknown"
        basemon = "no"
        bracket_groups = re.findall(r"\[(.*?)\]", tags)

        if bracket_groups:
            parts = bracket_groups[0].split(",")
            if len(parts) > 1:
                app_id = parts[1].strip().lower()
            if len(bracket_groups) > 1 and "basemon" in bracket_groups[1].lower():
                basemon = "yes"

        rows_to_process.append({
            "name": name,
            "group": group,
            "frequency": frequency,
            "host": host,
            "port": port,
            "app_id": app_id,
            "basemon": basemon,
            "type": type_
        })
    except Exception as e:
        print(f"Error parsing row: {e}")
        continue

# ----------------------------
# Build YAML entry for each row
# ----------------------------
def resolve_and_build(entry):
    fqdn = get_fqdn_from_nslookup(entry["host"])
    hostname_or_ip = extract_hostname(fqdn)
    target = f"{fqdn}:{entry['port']}" if entry.get("port") else fqdn

    return {
        "labels": {
            "frequency": str(entry.get("frequency", "600")).lower(),
            "group": entry.get("group", "").lower(),
            "host": hostname_or_ip,
            "fqdn": fqdn.lower(),
            "module": "tcp_connect",
            "name": entry.get("name", "").lower(),
            "port": str(entry.get("port", "")).lower(),
            "timeout": str(entry.get("timeout", "60")).lower(),
            "type": entry.get("type", "portmonitor").lower(),
            "app_id": entry.get("app_id", "unknown").lower(),
            "basemon": entry.get("basemon", "no").lower()
        },
        "targets": [target]
    }

# ----------------------------
# Build YAML in parallel
# ----------------------------
yaml_output = []
with ThreadPoolExecutor(max_workers=50) as executor:
    futures = [executor.submit(resolve_and_build, row) for row in rows_to_process]
    for future in as_completed(futures):
        yaml_output.append(future.result())

# ----------------------------
# Save YAML
# ----------------------------
output_file = "blackbox_tcp.yaml"
with open(output_file, "w", encoding="utf-8") as f:
    yaml.dump(yaml_output, f, sort_keys=False)

print(f"\nâœ… YAML file '{output_file}' created with correct hostnames and FQDNs.")
