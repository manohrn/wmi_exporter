from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import os
import pyodbc
import httpx
from dotenv import load_dotenv
import logging
import traceback

# Load environment variables
load_dotenv()

# Logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")

# Environment variables
SQL_SERVER = os.getenv("SQL_SERVER")
SQL_PORT = os.getenv("SQL_PORT", "1433")
SQL_USER = os.getenv("SQL_USER")
SQL_PASSWORD = os.getenv("SQL_PASSWORD")
SQL_DB = os.getenv("SQL_DB")
TE_API_TOKEN = os.getenv("TE_API_TOKEN")
BASE_URL = os.getenv("TE_BASE_URL", "https://api.thousandeyes.com/v6")
HTTP_PROXY = os.getenv("HTTP_PROXY")
HTTPS_PROXY = os.getenv("HTTPS_PROXY")

proxies = {}
if HTTP_PROXY and HTTPS_PROXY:
    proxies = {
        "http://": HTTP_PROXY,
        "https://": HTTPS_PROXY
    }

app = FastAPI()

class AppIDRequest(BaseModel):
    app_id: str

def get_aids(app_id: str):
    try:
        conn_str = (
            f"DRIVER={{ODBC Driver 17 for SQL Server}};"
            f"SERVER={SQL_SERVER},{SQL_PORT};"
            f"DATABASE={SQL_DB};"
            f"UID={SQL_USER};"
            f"PWD={SQL_PASSWORD};"
            f"TrustServerCertificate=Yes;"
        )
        conn = pyodbc.connect(conn_str)
        cursor = conn.cursor()
        cursor.execute("SELECT DISTINCT Aid FROM dbo.t_ThousandEyes_Tests WITH (NOLOCK) WHERE AppIds = ?", app_id)
        rows = cursor.fetchall()
        conn.close()
        if not rows:
            raise ValueError(f"No AIDs found for App ID: {app_id}")
        return [row[0] for row in rows]
    except Exception as e:
        logging.error(f"Database error: {e}")
        raise

def fetch_labels(aid: int, client: httpx.Client):
    url = f"{BASE_URL}/groups?aid={aid}&format=json"
    headers = {"Authorization": f"Bearer {TE_API_TOKEN}"}
    try:
        response = client.get(url, headers=headers)
        response.raise_for_status()
        groups = response.json().get("groups", [])
        return [g for g in groups if "distributed_app_ids" in g.get("name", "").lower()]
    except Exception as e:
        logging.error(f"Label fetch error for AID {aid}: {e}")
        return []

def fetch_tests_for_group(group_id: int, aid: int, client: httpx.Client):
    url = f"{BASE_URL}/groups/{group_id}?aid={aid}&format=json"
    headers = {"Authorization": f"Bearer {TE_API_TOKEN}"}
    try:
        response = client.get(url, headers=headers)
        response.raise_for_status()
        return response.json().get("tests", [])
    except Exception as e:
        logging.error(f"Test fetch error for group {group_id}, AID {aid}: {e}")
        return []

@app.post("/get-test-results")
def get_test_results(request: AppIDRequest):
    app_id = request.app_id.strip()
    try:
        print(f"Received AppID: {app_id}")
        all_results = []
        with httpx.Client(timeout=30, proxies=proxies) as client:
            aids = get_aids(app_id)
            print(f"AIDs found: {aids}")

            for aid in aids:
                labels = fetch_labels(aid, client)
                print(f"AID {aid}: {len(labels)} distributed labels found")

                for label in labels:
                    group_id = label.get("groupId")
                    print(f"Fetching tests for group: {group_id} (AID {aid})")
                    tests = fetch_tests_for_group(group_id, aid, client)
                    print(f"Group {group_id}: {len(tests)} test(s)")

                    for test in tests:
                        test["aid"] = aid
                        test["groupId"] = group_id

                    all_results.extend(tests)

        return {
            "app_id": app_id,
            "total_tests": len(all_results),
            "results": all_results
        }

    except ValueError as ve:
        print(f"[404 ERROR] {ve}")
        raise HTTPException(status_code=404, detail=str(ve))
    except Exception as e:
        print("[500 ERROR]")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail="Internal Server Error")
