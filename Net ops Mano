from kafka import KafkaConsumer
from prometheus_client import Gauge, generate_latest
import json
from flask import Flask, Response

# Initialize Flask app
app = Flask(__name__)

# Define the list of bootstrap servers
bootstrap_servers = ['your_bootstrap_server_here']

# Define the topic you want to consume from
topic_name = 'netopsmetric-export'

# Create a Kafka consumer
consumer = KafkaConsumer(
    topic_name,
    bootstrap_servers=bootstrap_servers,
    auto_offset_reset='earliest',  # Start reading at the earliest available message
    enable_auto_commit=True
)

# Define Prometheus metrics
message_count = Gauge('kafka_messages_total', 'Total number of messages consumed from Kafka')
bits_in = Gauge('bits_in', 'Bits in per second')
bits_out = Gauge('bits_out', 'Bits out per second')

# Function to process each message from Kafka
def process_message(message):
    # Process the message and update Prometheus metrics
    message_count.inc()
    try:
        value = json.loads(message.value.decode('utf-8'))

        for metric in value['metrics']:
            if 'metricFamily' in metric:
                if metric['metricFamily'] == 'NormalizedPortInfo':
                    bits_in_value = metric['metrics'].get('BitsIn', 0)
                    bits_out_value = metric['metrics'].get('BitsOut', 0)

                    # Update the Prometheus metrics with real values
                    bits_in.set(bits_in_value)
                    bits_out.set(bits_out_value)

    except json.JSONDecodeError as e:
        print(f"JSON decode error: {e}")
    except Exception as e:
        print(f"Error processing message: {e}")

# Flask route to expose metrics
@app.route('/metrics')
def prometheus_metrics():
    return Response(generate_latest(), mimetype='text/plain')

# Start processing messages from Kafka
try:
    for message in consumer:
        process_message(message)
except KeyboardInterrupt:
    print("Stopped by user")
finally:
    # Close the consumer connection
    consumer.close()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=12345)
