import requests
import json

# Function to create alert rule JSON
def create_alert_rule(alert_name, app_id, threshold_value, custom_labels=None):
    if custom_labels is None:
        custom_labels = {}

    rule_group_name = f"{app_id}-alert-rules"
    expression = f'some_metric{{app_id="{app_id}"}} > {threshold_value}'

    alert_rule = {
        "name": rule_group_name,
        "interval": "1m",
        "rules": [
            {
                "alert": alert_name,
                "expr": expression,
                "labels": {
                    "severity": "critical",
                    **custom_labels
                },
                "annotations": {
                    "summary": f"{alert_name} triggered for application {app_id}",
                    "description": f"The metric exceeded the threshold of {threshold_value} for application {app_id}."
                }
            }
        ]
    }

    return alert_rule

# Function to post alert rule to Mimir API
def post_alert_rule(mimir_api_url, alert_rule, auth_token=None):
    headers = {
        "Content-Type": "application/json",
    }

    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"

    response = requests.post(mimir_api_url, headers=headers, data=json.dumps(alert_rule))

    if response.status_code == 200 or response.status_code == 201:
        print("Alert rule successfully posted.")
    else:
        print(f"Failed to post alert rule: {response.status_code}")
        print(response.text)

# Input parameters
alert_name = "HighCPUUsage"
app_id = "application123"
threshold_value = 80
custom_labels = {
    "environment": "production",
    "team": "ops"
}

# Mimir API endpoint
mimir_api_url = "https://mimir.example.com/api/v1/rules"

# Optional: Authentication token
auth_token = "your_auth_token"

# Create alert rule JSON
alert_rule = create_alert_rule(alert_name, app_id, threshold_value, custom_labels)

# Post alert rule to Mimir API
post_alert_rule(mimir_api_url, alert_rule, auth_token)
