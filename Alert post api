import yaml
import argparse
import requests
import base64

# Hardcoded configuration
MIMIR_SAAS_URL = 'https://your-mimir-saas-endpoint/api/v1/rules'  # Update with your actual Mimir SaaS URL
USERNAME = 'your_username'  # Update with your actual username
API_KEY = 'your_api_key'  # Update with your actual API key

def create_alerting_rule(alert_name, threshold):
    group_name = 'example.rules'
    namespace = 'example-namespace'
    duration = '5m'
    metric_name = 'cpu_usage'
    operator = '>'

    rule = {
        'groups': [
            {
                'name': group_name,
                'rules': [
                    {
                        'alert': alert_name,
                        'expr': f'{metric_name}{{namespace="{namespace}"}} {operator} {threshold}',
                        'for': duration,
                        'labels': {
                            'severity': 'warning',
                            'namespace': namespace,
                        },
                        'annotations': {
                            'summary': f'High {metric_name} detected in namespace {namespace}',
                            'description': f'{metric_name} in namespace {namespace} is {operator} {threshold} for more than {duration}',
                        },
                    }
                ]
            }
        ]
    }

    return yaml.dump(rule, default_flow_style=False)

def push_rule_to_mimir(rule_yaml):
    auth_string = f"{USERNAME}:{API_KEY}"
    auth_bytes = auth_string.encode('ascii')
    auth_base64 = base64.b64encode(auth_bytes).decode('ascii')
    
    headers = {
        'Content-Type': 'application/x-yaml',
        'Authorization': f'Basic {auth_base64}'
    }
    
    response = requests.put(MIMIR_SAAS_URL, headers=headers, data=rule_yaml)

    if response.status_code in (200, 202):
        print('Alerting rule successfully pushed to Mimir SaaS')
    else:
        print(f'Failed to push alerting rule to Mimir SaaS: {response.status_code}')
        print(response.text)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Create and push a Prometheus alerting rule to Mimir SaaS')
    parser.add_argument('alert_name', type=str, help='The name of the alert')
    parser.add_argument('threshold', type=int, help='The threshold for the alert')

    args = parser.parse_args()

    # Create the alerting rule YAML
    rule_yaml = create_alerting_rule(args.alert_name, args.threshold)

    # Push the rule to Mimir SaaS
    push_rule_to_mimir(rule_yaml)
