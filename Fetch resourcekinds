import requests
import logging
import time

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Define vROps API endpoint and credentials
vrops_url = 'https://your_vrops_instance'
username = 'your_username'
password = 'your_password'

# Function to authenticate and get a token
def get_auth_token(vrops_url, username, password):
    url = f'{vrops_url}/suite-api/api/auth/token/acquire'
    payload = {
        'username': username,
        'password': password
    }
    headers = {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
    }

    response = requests.post(url, headers=headers, json=payload, verify=False)
    response.raise_for_status()
    return response.json()['token']

# Function to fetch data from vROps API
def fetch_data_from_vrops(url, params, auth_token):
    headers = {
        'Accept': 'application/json',
        'Authorization': f'vRealizeOpsToken {auth_token}'
    }
    try:
        response = requests.get(url, headers=headers, verify=False, timeout=10, params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.HTTPError as http_err:
        logging.error(f'HTTP error occurred: {http_err}')
    except requests.exceptions.ConnectionError as conn_err:
        logging.error(f'Connection error occurred: {conn_err}')
    except requests.exceptions.Timeout as timeout_err:
        logging.error(f'Timeout error occurred: {timeout_err}')
    except requests.exceptions.RequestException as req_err:
        logging.error(f'Error occurred: {req_err}')
    return None

# Function to fetch virtual machine resource kind
def fetch_virtual_machine_resource_kind(vrops_url, auth_token):
    resource_kind_key = 'VirtualMachine'
    start_index = 0
    page_size = 1000
    vm_resource_kinds = []

    while True:
        api_url = f'{vrops_url}/suite-api/api/resourcekinds'
        params = {
            'resourceKindKey': resource_kind_key,
            'pageSize': page_size,
            'startIndex': start_index
        }
        data = fetch_data_from_vrops(api_url, params, auth_token)
        
        if data is None:
            logging.error('Failed to fetch resource kind data, retrying...')
            time.sleep(5)
            continue

        resource_kinds_page = data.get('resourceKind', [])
        
        if not resource_kinds_page:
            logging.info('No more virtual machine resource kinds to fetch.')
            break

        vm_resource_kinds.extend(resource_kinds_page)

        if len(resource_kinds_page) < page_size:
            break

        start_index += page_size

    logging.info(f'Total virtual machine resource kinds retrieved: {len(vm_resource_kinds)}')
    return vm_resource_kinds

# Main execution
if __name__ == '__main__':
    auth_token = get_auth_token(vrops_url, username, password)
    vm_resource_kinds = fetch_virtual_machine_resource_kind(vrops_url, auth_token)
    vm_count = sum(rk.get('resourceCount', 0) for rk in vm_resource_kinds)
    vm_resource_kind_ids = [rk.get('resourceKindKey') for rk in vm_resource_kinds]

    print(f'Total virtual machines: {vm_count}')
    print(f'Virtual machine resource kind IDs: {vm_resource_kind_ids}')
