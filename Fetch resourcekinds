# resource_kinds.py

import requests
from requests.auth import HTTPBasicAuth
import logging
import time

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Define vROps API endpoint and credentials
vrops_url = 'https://your_vrops_instance'
username = 'your_username'
password = 'your_password'

# Initialize pagination variables
page_size = 1000  # Number of items per page

# Function to fetch data from vROps API with pagination
def fetch_data_from_vrops(url, params, auth):
    try:
        response = requests.get(url, auth=auth, verify=False, timeout=10, params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.HTTPError as http_err:
        logging.error(f'HTTP error occurred: {http_err}')
    except requests.exceptions.ConnectionError as conn_err:
        logging.error(f'Connection error occurred: {conn_err}')
    except requests.exceptions.Timeout as timeout_err:
        logging.error(f'Timeout error occurred: {timeout_err}')
    except requests.exceptions.RequestException as req_err:
        logging.error(f'Error occurred: {req_err}')
    return None

# Method to fetch all resource kinds
def fetch_all_resource_kinds(vrops_url, username, password):
    resource_kinds = []
    start_index = 0
    while True:
        api_url = f'{vrops_url}/suite-api/api/resourcekinds'
        params = {'start': start_index, 'limit': page_size}
        data = fetch_data_from_vrops(api_url, params, HTTPBasicAuth(username, password))
        
        if data is None:
            logging.error('Failed to fetch resource kinds, retrying...')
            time.sleep(5)
            continue
        
        resource_kinds_page = data.get('resourceKind', [])
        
        if not resource_kinds_page:
            logging.info('No more resource kinds to fetch.')
            break
        
        resource_kinds.extend(resource_kinds_page)
        
        if len(resource_kinds_page) < page_size:
            break
        
        start_index += page_size
    
    logging.info(f'Total resource kinds retrieved: {len(resource_kinds)}')
    return resource_kinds
