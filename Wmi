import os
import logging
from fastapi import FastAPI, HTTPException, Body
from dotenv import load_dotenv
import pymssql
import requests

# Load environment variables
load_dotenv()

# Logging setup
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
logger = logging.getLogger(__name__)

# Environment variables
DB_SERVER = os.getenv("DB_SERVER")
DB_PORT = int(os.getenv("DB_PORT", "1433"))
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_NAME = os.getenv("DB_NAME")
TE_API_TOKEN = os.getenv("TE_API_TOKEN")
TE_API_BASE_URL = os.getenv("TE_API_BASE_URL", "https://api.thousandeyes.com/v6").rstrip("/")
HTTP_PROXY = os.getenv("HTTP_PROXY")
HTTPS_PROXY = os.getenv("HTTPS_PROXY")

# Proxy configuration
proxies = {}
if HTTP_PROXY:
    proxies["http"] = HTTP_PROXY
if HTTPS_PROXY:
    proxies["https"] = HTTPS_PROXY

# Mapping test types to endpoint, metric key, and root key
TYPE_TO_ENDPOINT = {
    "agent-to-server": ("net/metrics", "loss", "metrics"),
    "http-server": ("web/http-server", "responseCode", "httpServer"),
    "page-load": ("web/page-load", "numErrors", "pageLoad"),
    "web-transactions": ("web/transactions", "transactionTime", "transactions")
}

# Initialize FastAPI
app = FastAPI()

@app.post("/get-test-results")
def get_test_results(payload: dict = Body(..., example={"app_id": "NETOPS"})):
    app_id = payload.get("app_id")
    if not app_id:
        raise HTTPException(status_code=422, detail="Missing app_id")

    # Query top 10 distinct test records
    try:
        with pymssql.connect(server=DB_SERVER, port=DB_PORT, user=DB_USER,
                             password=DB_PASSWORD, database=DB_NAME) as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT TOP 10 Aid, TestType, TestId, TestName
                    FROM (
                        SELECT DISTINCT Aid, TestType, TestId, TestName
                        FROM dbo.t_ThousandEyes_Tests WITH (NOLOCK)
                        WHERE AppIds = %s AND Enabled = 1
                    ) AS unique_tests
                """, (app_id,))
                rows = cursor.fetchall()
    except Exception as e:
        logger.error("Database error: %s", e)
        raise HTTPException(status_code=500, detail="Database query failed")

    if not rows:
        raise HTTPException(status_code=404, detail=f"No tests found for app_id '{app_id}'")

    headers = {
        "Authorization": f"Bearer {TE_API_TOKEN}",
        "Accept": "application/json"
    }

    results = []

    for aid, test_type, test_id, test_name in rows:
        test_type = test_type.lower()
        if test_type not in TYPE_TO_ENDPOINT:
            logger.warning("Skipping unsupported test type: %s", test_type)
            continue

        endpoint, metric_key, root_key = TYPE_TO_ENDPOINT[test_type]
        url = f"{TE_API_BASE_URL}/{endpoint}/{test_id}?aid={aid}&format=json"

        try:
            response = requests.get(url, headers=headers, proxies=proxies, timeout=15)
            response.raise_for_status()
            json_data = response.json()
        except requests.RequestException as e:
            logger.error("Error fetching result for test %s: %s", test_id, e)
            continue

        # Extract value from root_key array
        metric_value = None
        section = json_data.get(root_key)
        if isinstance(section, list) and section:
            metric_value = section[0].get(metric_key)

        results.append({
            "aid": aid,
            "testId": test_id,
            "testName": test_name,
            metric_key: metric_value
        })

    return {
        "app_id": app_id,
        "test_result_count": len(results),
        "results": results
    }
