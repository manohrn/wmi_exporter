# fetch_metrics.py

import requests
from requests.auth import HTTPBasicAuth
from prometheus_client import Gauge, CollectorRegistry, generate_latest
import logging
import time
import redis
import json
from resource_kinds import fetch_all_resource_kinds

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Define vROps API endpoint and credentials
vrops_url = 'https://your_vrops_instance'
username = 'your_username'
password = 'your_password'

# Redis configuration
redis_host = 'localhost'
redis_port = 6379
redis_password = ''

# Connect to Redis
redis_client = redis.StrictRedis(host=redis_host, port=redis_port, password=redis_password, decode_responses=True)

# Function to fetch data from vROps API
def fetch_data_from_vrops(url, params, auth):
    try:
        response = requests.get(url, auth=auth, verify=False, timeout=10, params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.HTTPError as http_err:
        logging.error(f'HTTP error occurred: {http_err}')
    except requests.exceptions.ConnectionError as conn_err:
        logging.error(f'Connection error occurred: {conn_err}')
    except requests.exceptions.Timeout as timeout_err:
        logging.error(f'Timeout error occurred: {timeout_err}')
    except requests.exceptions.RequestException as req_err:
        logging.error(f'Error occurred: {req_err}')
    return None

# Fetch and store metrics for each resource kind
def fetch_and_store_metrics(resource_kinds):
    for resource_kind in resource_kinds:
        kind_key = resource_kind['key']
        logging.info(f'Fetching resources for resource kind: {kind_key}')
        
        start_index = 0
        resources = []
        
        # Fetch all resources for the current resource kind
        while True:
            api_url = f'{vrops_url}/suite-api/api/resources'
            params = {'resourceKind': kind_key, 'start': start_index, 'limit': 1000}
            data = fetch_data_from_vrops(api_url, params, HTTPBasicAuth(username, password))
            
            if data is None:
                logging.error('Failed to fetch resources, retrying...')
                time.sleep(5)
                continue
            
            resources_page = data.get('resource', [])
            
            if not resources_page:
                logging.info(f'No more resources to fetch for resource kind: {kind_key}.')
                break
            
            resources.extend(resources_page)
            
            if len(resources_page) < 1000:
                break
            
            start_index += 1000

        # Fetch metrics for each resource and store in Redis
        for resource in resources:
            resource_id = resource['identifier']
            logging.info(f'Fetching metrics for resource ID: {resource_id}')
            
            api_url = f'{vrops_url}/suite-api/api/resources/{resource_id}/stats/latest'
            data = fetch_data_from_vrops(api_url, {}, HTTPBasicAuth(username, password))
            
            if data is None:
                logging.error(f'Failed to fetch metrics for resource ID: {resource_id}, skipping...')
                continue
            
            # Create Prometheus metrics registry
            registry = CollectorRegistry()

            # Process and expose the metrics
            for metric_name, metric_value in data['values'].items():
                prom_metric_name = f'vrops_{kind_key}_{metric_name}'.replace('.', '_')
                gauge = Gauge(prom_metric_name, f'Metric {metric_name} for {kind_key}', ['resource_id'], registry=registry)
                gauge.labels(resource_id=resource_id).set(metric_value)
            
            # Serialize the Prometheus metrics to a string and store in Redis
            metrics_str = generate_latest(registry).decode('utf-8')
            redis_client.set(f'prom_metrics_{resource_id}', metrics_str)

if __name__ == "__main__":
    # Fetch all resource kinds
    resource_kinds = fetch_all_resource_kinds(vrops_url, username, password)

    # Periodically fetch and store metrics
    while True:
        fetch_and_store_metrics(resource_kinds)
        logging.info('Metrics fetched and stored in Redis successfully.')
        time.sleep(300)  # Fetch and update metrics every 5 minutes
