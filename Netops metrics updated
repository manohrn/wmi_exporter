from kafka import KafkaConsumer
from prometheus_client import start_http_server, Counter, Gauge, generate_latest
from flask import Flask, Response
import threading
import json

# Kafka settings
KAFKA_BROKER = 'your.kafka.broker:9093'  # Change this to your Kafka broker
KAFKA_TOPIC = 'net_ops_metrics'  # Change this to your Kafka topic
SASL_MECHANISM = 'PLAIN'  # Use 'PLAIN' for basic authentication
SECURITY_PROTOCOL = 'SASL_PLAINTEXT'  # Use 'SASL_PLAINTEXT' for non-SSL connection
SASL_USERNAME = 'your_username'  # Change this to your Kafka username
SASL_PASSWORD = 'your_password'  # Change this to your Kafka password

# Prometheus settings
PROMETHEUS_PORT = 8000

# Flask app
app = Flask(__name__)

# Prometheus metrics
message_counter = Counter('kafka_messages_total', 'Total number of Kafka messages', ['topic'])
net_ops_metric_gauge = Gauge('net_ops_metric', 'Net Ops Metric', ['metric_name'])

# Function to consume Kafka messages and update Prometheus metrics
def consume_messages():
    consumer = KafkaConsumer(
        KAFKA_TOPIC,
        bootstrap_servers=KAFKA_BROKER,
        auto_offset_reset='earliest',
        enable_auto_commit=True,
        group_id='net_ops_group',
        value_deserializer=lambda x: json.loads(x.decode('utf-8')),
        security_protocol=SECURITY_PROTOCOL,
        sasl_mechanism=SASL_MECHANISM,
        sasl_plain_username=SASL_USERNAME,
        sasl_plain_password=SASL_PASSWORD
    )
    
    for message in consumer:
        message_counter.labels(topic=KAFKA_TOPIC).inc()
        metric_data = message.value
        metric_name = metric_data.get('metric_name')
        metric_value = metric_data.get('value')
        if metric_name and isinstance(metric_value, (int, float)):
            net_ops_metric_gauge.labels(metric_name=metric_name).set(metric_value)

# Flask route to expose metrics
@app.route('/metrics')
def metrics():
    return Response(generate_latest(), mimetype='text/plain')

# Start Kafka consumer in a separate thread
consumer_thread = threading.Thread(target=consume_messages)
consumer_thread.daemon = True
consumer_thread.start()

# Start Flask app
if __name__ == '__main__':
    start_http_server(PROMETHEUS_PORT)
    app.run(host='0.0.0.0', port=PROMETHEUS_PORT)
