from kafka import KafkaConsumer
from prometheus_client import start_http_server, Gauge
import json
import time

# Define the list of bootstrap servers
bootstrap_servers = [
    "ent-kafka-dev101.wellsfargo.com:9092",
    "ent-kafka-dev101-a.wellsfargo.com:9092",
    "ent-kafka-dev101-b.wellsfargo.com:9092"
]

# Define the topic you want to consume from
topic_name = 'netopsmetric-export'

# Create a Kafka consumer
consumer = KafkaConsumer(
    topic_name,
    bootstrap_servers=bootstrap_servers,
    auto_offset_reset='earliest',  # Start reading at the earliest available message
    enable_auto_commit=True,
    value_deserializer=lambda x: json.loads(x.decode('utf-8'))
)

# Define Prometheus metrics
availability_metric = Gauge('availability', 'Availability of the service')
utilisation_in_metric = Gauge('utilisation_in', 'Inbound Utilisation of the service')
utilisation_out_metric = Gauge('utilisation_out', 'Outbound Utilisation of the service')
bitsin_metric = Gauge('bitsin', 'Bits in')
bitsout_metric = Gauge('bitsout', 'Bits out')

# Start the Prometheus metrics server
start_http_server(8000)

def process_message(message):
    # Process the message and update Prometheus metrics
    data = message.value

    # Extract and update metrics
    try:
        availability = data['Availability']
        utilisation_in = data['UtilizationIn']
        utilisation_out = data['UtilizationOut']
        bitsin = data['BitsIn']
        bitsout = data['BitsOut']

        availability_metric.set(availability)
        utilisation_in_metric.set(utilisation_in)
        utilisation_out_metric.set(utilisation_out)
        bitsin_metric.set(bitsin)
        bitsout_metric.set(bitsout)

    except KeyError as e:
        print(f"Key error: {e} in message {data}")

# Read messages from the topic
try:
    for message in consumer:
        process_message(message)
except KeyboardInterrupt:
    print("Stopped by user")
finally:
    # Close the consumer connection
    consumer.close()
