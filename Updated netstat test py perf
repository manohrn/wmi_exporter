import psutil
from collections import defaultdict
import os
import time

# Directory where .prom files are written for Prometheus to scrape
PROM_FILE_DIR = "/path/to/prometheus/textfile/dir"
PROM_FILE_PATH = os.path.join(PROM_FILE_DIR, "netstat_process_metrics.prom")

def collect_and_write_prom_metrics():
    tcp_counts = defaultdict(int)
    udp_counts = defaultdict(int)
    
    # Open the .prom file for writing
    with open(PROM_FILE_PATH, 'w') as prom_file:
        # Get network connections (both TCP and UDP)
        connections = psutil.net_connections(kind='inet')  # inet includes both TCP and UDP
        
        for conn in connections:
            pid = conn.pid
            if pid:
                try:
                    proc = psutil.Process(pid)
                    process_name = proc.name()
                    
                    # Correctly access IP and port from local_address and remote_address tuples
                    local_address = conn.laddr
                    remote_address = conn.raddr if conn.raddr else ('', '')
                    
                    # Extract IP and port correctly from the tuple
                    local_ip = local_address[0] if local_address else ''
                    local_port = local_address[1] if local_address else ''
                    remote_ip = remote_address[0] if remote_address else ''
                    remote_port = remote_address[1] if remote_address else ''
                    
                    # Check if it's TCP or UDP
                    protocol = 'tcp' if conn.type == 1 else 'udp'  # 1 for SOCK_STREAM (TCP), 2 for SOCK_DGRAM (UDP)
                    
                    if protocol == 'tcp':
                        tcp_counts[(process_name, pid)] += 1
                    else:
                        udp_counts[(process_name, pid)] += 1
                    
                    # Fetch CPU and memory usage
                    cpu_usage = proc.cpu_percent(interval=0.1)
                    memory_info = proc.memory_info().rss  # Resident Set Size (RSS) - Memory usage in bytes
                    
                    # Write detailed process and network connection information as Prometheus metrics
                    prom_file.write(
                        f'netstat_process_info{{process="{process_name}", pid="{pid}", protocol="{protocol}", '
                        f'local_addr="{local_ip}", local_port="{local_port}", '
                        f'remote_addr="{remote_ip}", remote_port="{remote_port}"}} 1\n'
                    )
                    
                    # Write CPU and memory utilization metrics with the same labels
                    prom_file.write(
                        f'process_cpu_usage_percent{{process="{process_name}", pid="{pid}", protocol="{protocol}", '
                        f'local_addr="{local_ip}", local_port="{local_port}", '
                        f'remote_addr="{remote_ip}", remote_port="{remote_port}"}} {cpu_usage}\n'
                    )
                    prom_file.write(
                        f'process_memory_usage_bytes{{process="{process_name}", pid="{pid}", protocol="{protocol}", '
                        f'local_addr="{local_ip}", local_port="{local_port}", '
                        f'remote_addr="{remote_ip}", remote_port="{remote_port}"}} {memory_info}\n'
                    )

                except psutil.NoSuchProcess:
                    # Handle case where process no longer exists (it may have terminated)
                    continue
                except Exception as e:
                    # Catch any other exceptions that might occur
                    print(f"Error processing PID {pid}: {e}")
                    continue

        # Write TCP and UDP counts per process
        for (process_name, pid), count in tcp_counts.items():
            prom_file.write(
                f'process_tcp_connection_count{{process="{process_name}", pid="{pid}"}} {count}\n'
            )

        for (process_name, pid), count in udp_counts.items():
            prom_file.write(
                f'process_udp_connection_count{{process="{process_name}", pid="{pid}"}} {count}\n'
            )

if __name__ == '__main__':
    # Run the collection and file writing in a loop, updating every 30 seconds
    while True:
        collect_and_write_prom_metrics()
        time.sleep(30)  # Update every 30 seconds
