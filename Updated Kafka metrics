from kafka import KafkaConsumer
from prometheus_client import start_http_server, Gauge, REGISTRY
from prometheus_client.core import CollectorRegistry
import json
import time

# Define the list of bootstrap servers
bootstrap_servers = ["server1:9092", "server2:9092", "server3:9092"]

# Define the topic you want to consume from
topic_name = 'your_topic_name'

# Create a Kafka consumer
consumer = KafkaConsumer(
    topic_name,
    bootstrap_servers=bootstrap_servers,
    auto_offset_reset='earliest',  # Start reading at the earliest available message
    enable_auto_commit=True
)

# Start the Prometheus metrics server
start_http_server(8000)

# Registry for dynamic metrics
dynamic_registry = CollectorRegistry()

# Dictionary to hold dynamic metrics
metrics = {}

def get_or_create_metric(name, description):
    if name not in metrics:
        metrics[name] = Gauge(name, description, registry=dynamic_registry)
    return metrics[name]

def process_message(message):
    try:
        data = json.loads(message.value.decode('utf-8'))
        for key, value in data.items():
            if isinstance(value, (int, float)):
                metric = get_or_create_metric(key, f'Dynamic metric for {key}')
                metric.set(value)
    except (ValueError, json.JSONDecodeError):
        print(f"Invalid message format: {message.value.decode('utf-8')}")

# Read messages from the topic
try:
    for message in consumer:
        process_message(message)
except KeyboardInterrupt:
    print("Stopped by user")
finally:
    # Close the consumer connection
    consumer.close()
